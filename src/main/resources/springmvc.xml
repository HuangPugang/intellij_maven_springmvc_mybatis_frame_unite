<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- spring自动扫描org.andy.shop下的包 -->
    <context:component-scan base-package="org.andy.shop"/>
    <!-- json转换器 -->
    <bean id="jsonConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes" value="application/json"/>
    </bean>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--String return 中文乱码处理-->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="org.andy.shop.interceptor.AllInterceptor"/>
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/test/number.do"/>-->
            <!--&lt;!&ndash; 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 &ndash;&gt;-->
            <!--<bean class="com.host.app.web.interceptor.LoginInterceptor"/>-->
        <!--</mvc:interceptor>-->
    </mvc:interceptors>

    <!-- 引入jdbc配置文件 -->
     <context:property-placeholder location="classpath:config.properties" />

    <!-- 1. 数据源 : DruidDataSource -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url"
                  value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="0" />
        <property name="maxTotal" value="20" />
        <property name="minIdle" value="0" />
        <property name="maxWaitMillis" value="60000" />
        <property name="poolPreparedStatements" value="true" />
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
    </bean>

    <!--<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
          <!--init-method="init" destroy-method="close">-->
        <!--<property name="url" value="jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf-8" />-->
        <!--<property name="username" value="root" />-->
        <!--<property name="password" value="" />-->
        <!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
        <!--<property name="initialSize" value="0" />-->
        <!--&lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="20" />-->
        <!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
        <!--<property name="minIdle" value="0" />-->
        <!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->
        <!--<property name="poolPreparedStatements" value="true" />-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="33" />-->
        <!--&lt;!&ndash; 用来检测有效sql &ndash;&gt;-->
        <!--<property name="validationQuery" value="${validationQuery}" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="25200000" />-->
        <!--&lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
        <!--<property name="removeAbandoned" value="true" />-->
        <!--&lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="1800" />-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true" />-->
        <!--&lt;!&ndash; 监控数据库 &ndash;&gt;-->
        <!--<property name="filters" value="mergeStat" />-->
    <!--</bean>-->

    <!-- 2. mybatis 的 SqlSession 的工厂: SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动将类的全名使用类名做为别名 -->
        <property name="typeAliasesPackage" value="org.andy.shop.model"/>
        <!-- 自动扫描mybatis-config.xml文件下的配置文件 -->
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml"
            /> -->
        <!-- 使用通配符自动扫描mapper文件，就不需要在mybatis-config.xml里配置mapper映射了 -->
        <property name="mapperLocations"
                  value="classpath:org/andy/shop/mapping/*.xml"/>
    </bean>

    <!-- 3. mybatis 自动扫描加载 Sql 映射文件 : MapperScannerConfigurer -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.andy.shop.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 4. 事务管理 : DataSourceTransactionManager -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- Spring aop事务管理 -->
    <aop:config>
        <aop:pointcut id="transactionPointcut"
                      expression="execution(* org.andy.shop.service..*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut"
                     advice-ref="transactionAdvice" />
    </aop:config>

    <!-- 5. 使用声明式事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- 文件上传配置 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>32505856</value>
        </property>
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
        <property name="maxInMemorySize">
            <value>4096</value>
        </property>
    </bean>

</beans>